def normalize_job_name(job_name):
    """ Remplace le préfixe 'ref' par 'target' dans le nom du job. """
    return job_name.replace('ref-', 'target-')

def read_jil_file(file_path):
    """ Lit un fichier JIL et retourne une liste de jobs avec leurs détails. """
    jobs = {}
    with open(file_path, 'r') as file:
        current_job = None
        job_content = ""
        for vline in file:
            line = vline.lstrip()
            if line.startswith('insert_job'):
                if current_job:
                    jobs[current_job] = job_content
                job_name = line.split()[1]
                current_job = job_name
                job_content = line
            elif current_job:
                job_content += line
        if current_job:
            jobs[current_job] = job_content
    return jobs

def extract_job_references(condition_line):
    """ Extrait les références de jobs à partir d'une ligne de condition. """
    references = []
    conditions = condition_line.split(' AND ')
    for cond in conditions:
        if 'success(' in cond or 'failure(' in cond or 'done(' in cond:
            job_ref = cond.split('(')[1].split(')')[0].strip()
            references.append(job_ref)
    return references

def find_missing_and_dependent_jobs(jobs_target, jobs_ref):
    """ Identifie les jobs manquants et les jobs dans ref qui dépendent des jobs manquants. """
    missing_jobs = {}
    dependent_jobs = {}

    # Trouver les jobs manquants
    for job, content in jobs_ref.items():
        normalized_job = normalize_job_name(job)
        if normalized_job not in jobs_target:
            missing_jobs[normalized_job] = content

    # Trouver les jobs dépendants dans l'environnement de référence
    for job, content in jobs_ref.items():
        if 'condition' in content:
            conditions_line = ""
            for line in content.split('\n'):
                if 'condition' in line:
                    conditions_line = line
                    job_refs = extract_job_references(line)
                    for ref in job_refs:
                        normalized_ref = normalize_job_name(ref)
                        if normalized_ref in missing_jobs:
                            dependent_jobs[normalize_job_name(job)] = f"update_job: {normalize_job_name(job)}\n{conditions_line}\n"
                            break

    return missing_jobs, dependent_jobs

def write_jil_file(missing_jobs, dependent_jobs, output_file):
    """ Écrit les jobs manquants et les mises à jour des jobs dépendants dans un fichier JIL. """
    with open(output_file, 'w') as file:
        for job, content in missing_jobs.items():
            file.write(content + "\n\n")
        for job, content in dependent_jobs.items():
            file.write(content + "\n\n")

# Chemins vers vos fichiers JIL
jil_file_target = 'chemin/vers/target.jil'
jil_file_ref = 'chemin/vers/ref.jil'

# Lire les fichiers JIL
jobs_target = read_jil_file(jil_file_target)
jobs_ref = read_jil_file(jil_file_ref)

# Trouver les jobs manquants et les jobs dépendants
missing_jobs, dependent_jobs = find_missing_and_dependent_jobs(jobs_target, jobs_ref)

# Écrire un fichier JIL pour les jobs manquants et les jobs dépendants
output_jil_file = 'chemin/vers/jobs_manquants_et_dependants.jil'
write_jil_file(missing_jobs, dependent_jobs, output_jil_file)

print(f"Les jobs manquants et les mises à jour des jobs dépendants ont été écrits dans {output_jil_file}.")
